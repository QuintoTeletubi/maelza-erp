// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== USUARIOS Y ROLES ==========
model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  permissions Json?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  isActive  Boolean  @default(true)
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones con transacciones
  createdSales     Sale[]     @relation("UserCreatedSales")
  createdPurchases Purchase[] @relation("UserCreatedPurchases")

  @@map("users")
}

// ========== CLIENTES Y PROVEEDORES ==========
model Customer {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  taxId        String?  @unique // RUC o c√©dula
  isActive     Boolean  @default(true)
  creditLimit  Float?   @default(0)
  currentDebt  Float    @default(0)
  sales        Sale[]
  receivables  AccountReceivable[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("customers")
}

model Supplier {
  id            String     @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  city          String?
  country       String?
  contactPerson String?
  contactPhone  String?
  taxId         String?    @unique
  notes         String?
  isActive      Boolean    @default(true)
  purchases     Purchase[]
  payables      AccountPayable[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("suppliers")
}

// ========== PRODUCTOS E INVENTARIO ==========
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  description String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String @id @default(cuid())
  code        String @unique
  name        String
  description String?
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  unit        String   @default("UNIT") // UNIT, KG, LB, etc
  costPrice   Float    @default(0)
  salePrice   Float    @default(0)
  stock       Int      @default(0)
  minStock    Int      @default(0)
  isActive    Boolean  @default(true)
  
  // Relaciones
  inventoryMoves InventoryMove[]
  saleItems      SaleItem[]
  purchaseItems  PurchaseItem[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model Warehouse {
  id             String          @id @default(cuid())
  name           String          @unique
  location       String?
  isActive       Boolean         @default(true)
  inventoryMoves InventoryMove[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("warehouses")
}

model InventoryMove {
  id          String    @id @default(cuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  type        String    // IN, OUT, ADJUST
  quantity    Int
  unitCost    Float
  reference   String?   // Referencia a compra, venta, ajuste
  notes       String?
  createdAt   DateTime  @default(now())

  @@map("inventory_moves")
}

// ========== COMPRAS ==========
model Purchase {
  id         String         @id @default(cuid())
  number     String         @unique
  supplierId String
  supplier   Supplier       @relation(fields: [supplierId], references: [id])
  userId     String
  user       User           @relation("UserCreatedPurchases", fields: [userId], references: [id])
  date       DateTime
  subtotal   Float          @default(0)
  tax        Float          @default(0)
  total      Float          @default(0)
  status     String         @default("PENDING") // PENDING, COMPLETED, CANCELLED
  notes      String?
  items      PurchaseItem[]
  payables   AccountPayable[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("purchases")
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  unitPrice  Float
  total      Float

  @@map("purchase_items")
}

// ========== VENTAS ==========
model Sale {
  id         String              @id @default(cuid())
  number     String              @unique
  customerId String
  customer   Customer            @relation(fields: [customerId], references: [id])
  userId     String
  user       User                @relation("UserCreatedSales", fields: [userId], references: [id])
  date       DateTime
  subtotal   Float               @default(0)
  tax        Float               @default(0)
  total      Float               @default(0)
  status     String              @default("PENDING") // PENDING, COMPLETED, CANCELLED
  notes      String?
  items      SaleItem[]
  receivables AccountReceivable[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  unitPrice Float
  total     Float

  @@map("sale_items")
}

// ========== CUENTAS POR PAGAR Y COBRAR ==========
model AccountPayable {
  id         String    @id @default(cuid())
  purchaseId String
  purchase   Purchase  @relation(fields: [purchaseId], references: [id])
  supplierId String
  supplier   Supplier  @relation(fields: [supplierId], references: [id])
  amount     Float
  paidAmount Float     @default(0)
  dueDate    DateTime
  status     String    @default("PENDING") // PENDING, PARTIAL, PAID
  payments   Payment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("accounts_payable")
}

model AccountReceivable {
  id           String    @id @default(cuid())
  saleId       String
  sale         Sale      @relation(fields: [saleId], references: [id])
  customerId   String
  customer     Customer  @relation(fields: [customerId], references: [id])
  amount       Float
  paidAmount   Float     @default(0)
  dueDate      DateTime
  status       String    @default("PENDING") // PENDING, PARTIAL, PAID
  payments     Payment[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("accounts_receivable")
}

model Payment {
  id                  String             @id @default(cuid())
  amount              Float
  method              String             // CASH, TRANSFER, CHECK, CARD
  reference           String?
  notes               String?
  accountPayableId    String?
  accountPayable      AccountPayable?    @relation(fields: [accountPayableId], references: [id])
  accountReceivableId String?
  accountReceivable   AccountReceivable? @relation(fields: [accountReceivableId], references: [id])
  createdAt           DateTime           @default(now())

  @@map("payments")
}
